// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

/*
Package dojo is a generated protocol buffer package.

It is generated from these files:
	server.proto

It has these top-level messages:
	HelloRequest
	HelloResponse
*/
package dojo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HelloRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type HelloResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *HelloResponse) Reset()                    { *m = HelloResponse{} }
func (m *HelloResponse) String() string            { return proto.CompactTextString(m) }
func (*HelloResponse) ProtoMessage()               {}
func (*HelloResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "dojo.HelloRequest")
	proto.RegisterType((*HelloResponse)(nil), "dojo.HelloResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Dojo service

type DojoClient interface {
	Hello(ctx context.Context, opts ...grpc.CallOption) (Dojo_HelloClient, error)
}

type dojoClient struct {
	cc *grpc.ClientConn
}

func NewDojoClient(cc *grpc.ClientConn) DojoClient {
	return &dojoClient{cc}
}

func (c *dojoClient) Hello(ctx context.Context, opts ...grpc.CallOption) (Dojo_HelloClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Dojo_serviceDesc.Streams[0], c.cc, "/dojo.Dojo/Hello", opts...)
	if err != nil {
		return nil, err
	}
	x := &dojoHelloClient{stream}
	return x, nil
}

type Dojo_HelloClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type dojoHelloClient struct {
	grpc.ClientStream
}

func (x *dojoHelloClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dojoHelloClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Dojo service

type DojoServer interface {
	Hello(Dojo_HelloServer) error
}

func RegisterDojoServer(s *grpc.Server, srv DojoServer) {
	s.RegisterService(&_Dojo_serviceDesc, srv)
}

func _Dojo_Hello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DojoServer).Hello(&dojoHelloServer{stream})
}

type Dojo_HelloServer interface {
	Send(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type dojoHelloServer struct {
	grpc.ServerStream
}

func (x *dojoHelloServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dojoHelloServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Dojo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dojo.Dojo",
	HandlerType: (*DojoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Hello",
			Handler:       _Dojo_Hello_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "server.proto",
}

func init() { proto.RegisterFile("server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 140 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x49, 0xc9, 0xcf, 0xca, 0x57, 0x52,
	0xe2, 0xe2, 0xf1, 0x48, 0xcd, 0xc9, 0xc9, 0x0f, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12,
	0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95,
	0x34, 0xb9, 0x78, 0xa1, 0x6a, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x24, 0xb8, 0xd8, 0x73,
	0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x61, 0xea, 0x60, 0x5c, 0x23, 0x1b, 0x2e, 0x16, 0x97, 0xfc, 0xac,
	0x7c, 0x21, 0x13, 0x2e, 0x56, 0xb0, 0x16, 0x21, 0x21, 0x3d, 0x90, 0x35, 0x7a, 0xc8, 0x76, 0x48,
	0x09, 0xa3, 0x88, 0x41, 0xcc, 0xd4, 0x60, 0x34, 0x60, 0x4c, 0x62, 0x03, 0xbb, 0xcc, 0x18, 0x10,
	0x00, 0x00, 0xff, 0xff, 0x95, 0xa2, 0x36, 0x93, 0xa9, 0x00, 0x00, 0x00,
}
